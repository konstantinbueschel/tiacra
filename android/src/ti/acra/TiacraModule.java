/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.acra;

import android.app.Application;
import java.util.HashMap;
import java.util.Map;
import org.acra.ACRA;
import org.acra.ACRAConfiguration;
import org.acra.ACRAConfigurationException;
import org.acra.ReportField;
import org.acra.ReportingInteractionMode;
import org.acra.sender.HttpSender;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiRHelper;


@Kroll.module(name="Tiacra", id="ti.acra")
public class TiacraModule extends KrollModule{
    private static final String LCAT = "[ACRA Wrapper Module]";
    private static final boolean DBG = TiConfig.LOGD;
    private static final String CONNECTION_TIMEOUT = "connectionTimeout";
    private static final String CUSTOME_REPORT_CONTENT = "customReportContent";
    private static final String DISABLE_SSL_CERTIFICATION_VALIDATION = "disableSSLCertValidation";
    private static final String FORM_URI = "formUri";
    private static final String FORM_URI_BASIC_AUTH_LOGIN = "formUriBasicAuthLogin";
    private static final String FORM_URI_BASIC_AUTH_PASSWORD = "formUriBasicAuthPassword";
    private static final String HTTP_METHOD = "httpMethod";
    private static final String LOGCAT_ARGUMENTS = "logcatArguments";
    private static final String LOGCAT_FILTER_BY_PID = "logcatFilterByPid";
    private static final String MAIL_TO = "mailTo";
    private static final String MAX_NUMBER_OF_REQUESTS_RETRIES = "maxNumberOfRequestRetries";
    private static final String REPORT_TYPE = "reportType";
    private static final String RES_TOAST_TEXT_KEY = "resToastTextKey";
    private static final String SEND_REPORTS_AT_SHUTDOWN = "sendReportsAtShutdown";
    private static final String SEND_REPORTS_IN_DEV_MODE = "sendReportsInDevMode";
    private static final String SOCKET_TIMEOUT = "socketTimeout";
    @Kroll.constant public static final int ReportField_ANDROID_VERSION = ReportField.ANDROID_VERSION.ordinal();
    @Kroll.constant public static final int ReportField_APP_VERSION_CODE = ReportField.APP_VERSION_CODE.ordinal();
    @Kroll.constant public static final int ReportField_APP_VERSION_NAME = ReportField.APP_VERSION_NAME.ordinal();
    @Kroll.constant public static final int ReportField_APPLICATION_LOG = ReportField.APPLICATION_LOG.ordinal();
    @Kroll.constant public static final int ReportField_AVAILABLE_MEM_SIZE = ReportField.AVAILABLE_MEM_SIZE.ordinal();
    @Kroll.constant public static final int ReportField_BRAND = ReportField.BRAND.ordinal();
    @Kroll.constant public static final int ReportField_BUILD = ReportField.BUILD.ordinal();
    @Kroll.constant public static final int ReportField_CRASH_CONFIGURATION = ReportField.CRASH_CONFIGURATION.ordinal();
    @Kroll.constant public static final int ReportField_CUSTOM_DATA = ReportField.CUSTOM_DATA.ordinal();
    @Kroll.constant public static final int ReportField_DEVICE_FEATURES = ReportField.DEVICE_FEATURES.ordinal();
    @Kroll.constant public static final int ReportField_DEVICE_ID = ReportField.DEVICE_ID.ordinal();
    @Kroll.constant public static final int ReportField_DISPLAY = ReportField.DISPLAY.ordinal();
    @Kroll.constant public static final int ReportField_DROPBOX = ReportField.DROPBOX.ordinal();
    @Kroll.constant public static final int ReportField_DUMPSYS_MEMINFO = ReportField.DUMPSYS_MEMINFO.ordinal();
    @Kroll.constant public static final int ReportField_ENVIRONMENT = ReportField.ENVIRONMENT.ordinal();
    @Kroll.constant public static final int ReportField_EVENTSLOG = ReportField.EVENTSLOG.ordinal();
    @Kroll.constant public static final int ReportField_FILE_PATH = ReportField.FILE_PATH.ordinal();
    @Kroll.constant public static final int ReportField_INITIAL_CONFIGURATION = ReportField.INITIAL_CONFIGURATION.ordinal();
    @Kroll.constant public static final int ReportField_INSTALLATION_ID = ReportField.INSTALLATION_ID.ordinal();
    @Kroll.constant public static final int ReportField_IS_SILENT = ReportField.IS_SILENT.ordinal();
    @Kroll.constant public static final int ReportField_MEDIA_CODEC_LIST = ReportField.MEDIA_CODEC_LIST.ordinal();
    @Kroll.constant public static final int ReportField_PACKAGE_NAME = ReportField.PACKAGE_NAME.ordinal();
    @Kroll.constant public static final int ReportField_PHONE_MODEL = ReportField.PHONE_MODEL.ordinal();
    @Kroll.constant public static final int ReportField_PRODUCT = ReportField.PRODUCT.ordinal();
    @Kroll.constant public static final int ReportField_RADIOLOG = ReportField.RADIOLOG.ordinal();
    @Kroll.constant public static final int ReportField_REPORT_ID = ReportField.REPORT_ID.ordinal();
    @Kroll.constant public static final int ReportField_SETTINGS_GLOBAL = ReportField.SETTINGS_GLOBAL.ordinal();
    @Kroll.constant public static final int ReportField_SETTINGS_SECURE = ReportField.SETTINGS_SECURE.ordinal();
    @Kroll.constant public static final int ReportField_SETTINGS_SYSTEM = ReportField.SETTINGS_SYSTEM.ordinal();
    @Kroll.constant public static final int ReportField_SHARED_PREFERENCES = ReportField.SHARED_PREFERENCES.ordinal();
    @Kroll.constant public static final int ReportField_STACK_TRACE = ReportField.STACK_TRACE.ordinal();
    @Kroll.constant public static final int ReportField_STACK_TRACE_HASH = ReportField.STACK_TRACE_HASH.ordinal();
    @Kroll.constant public static final int ReportField_LOGCAT = ReportField.LOGCAT.ordinal();
    @Kroll.constant public static final int ReportField_THREAD_DETAILS = ReportField.THREAD_DETAILS.ordinal();
    @Kroll.constant public static final int ReportField_TOTAL_MEM_SIZE = ReportField.TOTAL_MEM_SIZE.ordinal();
    @Kroll.constant public static final int ReportField_USER_APP_START_DATE = ReportField.USER_APP_START_DATE.ordinal();
    @Kroll.constant public static final int ReportField_USER_COMMENT = ReportField.USER_COMMENT.ordinal();
    @Kroll.constant public static final int ReportField_USER_CRASH_DATE = ReportField.USER_CRASH_DATE.ordinal();
    @Kroll.constant public static final int ReportField_USER_EMAIL = ReportField.USER_EMAIL.ordinal();
    @Kroll.constant public static final int ReportField_USER_IP = ReportField.USER_IP.ordinal();
    @Kroll.constant public static final int ReportingInteractionMode_SILENT = ReportingInteractionMode.SILENT.ordinal();
    @Kroll.constant public static final int ReportingInteractionMode_TOAST = ReportingInteractionMode.TOAST.ordinal();
    @Kroll.constant public static final int HttpSenderMethod_POST = HttpSender.Method.POST.ordinal();
    @Kroll.constant public static final int HttpSenderMethod_PUT = HttpSender.Method.PUT.ordinal();
    @Kroll.constant public static final int HttpReportType_FORM = HttpSender.Type.FORM.ordinal();
    @Kroll.constant public static final int HttpReportType_JSON = HttpSender.Type.JSON.ordinal();
    
	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		Log.i("TiacraModule", "ACRA module onAppCreate()");
		//super.onAppCreate();
    }

    public static ReportField[] toReportFieldArray(Object[] inArray) {
        ReportField[] outArray = new ReportField[inArray.length];
        for (int i = 0; i < inArray.length; ++i) {
            outArray[i] = ReportField.values()[((Number)inArray[i]).intValue()];
        }
        return outArray;
    }
	@Kroll.method
    public void init(HashMap hm) {
        Log.d((String)"[ACRA Wrapper Module]", (String)"Initializing...");
        KrollDict args = new KrollDict((Map)hm);
        TiApplication currentApplication = TiApplication.getInstance();
        ACRAConfiguration acraConfiguration = new ACRAConfiguration();
        int crashToastResId = 0;
        ReportingInteractionMode mode = ReportingInteractionMode.SILENT;
        HttpSender.Method httpMethod = HttpSender.Method.POST;
        HttpSender.Type reportType = HttpSender.Type.FORM;
        Object logcatArguments = null;
        try {
            if (args.containsKeyAndNotNull("resToastTextKey")) {
                crashToastResId = TiRHelper.getApplicationResource((String)("string." + args.getString("resToastTextKey")));
            }
            mode = ReportingInteractionMode.values()[args.optInt("mode", Integer.valueOf(0))];
            httpMethod = HttpSender.Method.values()[args.optInt("httpMethod", Integer.valueOf(0))];
            reportType = HttpSender.Type.values()[args.optInt("reportType", Integer.valueOf(0))];
        }
        catch (TiRHelper.ResourceNotFoundException e) {
            Log.d((String)"[ACRA Wrapper Module]", (String)" EXCEPTION -- RESOURCE NOT FOUND");
            return;
        }
        try {
            if (crashToastResId > 0) {
                acraConfiguration.setResToastText(crashToastResId);
            }
            if (args.containsKeyAndNotNull("customReportContent")) {
                acraConfiguration.setCustomReportContent(TiacraModule.toReportFieldArray((Object[])args.get((Object)"customReportContent")));
            }
            if (args.containsKeyAndNotNull("formUri")) {
                acraConfiguration.setFormUri(args.getString("formUri"));
            }
            if (args.containsKeyAndNotNull("formUriBasicAuthLogin")) {
                acraConfiguration.setFormUriBasicAuthLogin(args.getString("formUriBasicAuthLogin"));
            }
            if (args.containsKeyAndNotNull("disableSSLCertValidation")) {
                acraConfiguration.setDisableSSLCertValidation(args.getBoolean("disableSSLCertValidation"));
            }
            if (args.containsKeyAndNotNull("formUriBasicAuthPassword")) {
                acraConfiguration.setFormUriBasicAuthPassword(args.getString("formUriBasicAuthPassword"));
            }
            if (args.containsKeyAndNotNull("mailTo")) {
                acraConfiguration.setMailTo(args.getString("mailTo"));
            }
            if (args.containsKeyAndNotNull("logcatArguments")) {
                acraConfiguration.setLogcatArguments(args.getStringArray("logcatArguments"));
            }
            if (args.containsKeyAndNotNull("logcatFilterByPid")) {
                acraConfiguration.setLogcatFilterByPid(Boolean.valueOf(args.getBoolean("logcatFilterByPid")));
            }
            if (args.containsKeyAndNotNull("connectionTimeout")) {
                acraConfiguration.setConnectionTimeout(args.getInt("connectionTimeout"));
            }
            if (args.containsKeyAndNotNull("maxNumberOfRequestRetries")) {
                acraConfiguration.setMaxNumberOfRequestRetries(args.getInt("maxNumberOfRequestRetries"));
            }
            if (args.containsKeyAndNotNull("sendReportsAtShutdown")) {
                acraConfiguration.setSendReportsAtShutdown(Boolean.valueOf(args.getBoolean("sendReportsAtShutdown")));
            }
            if (args.containsKeyAndNotNull("sendReportsInDevMode")) {
                acraConfiguration.setSendReportsInDevMode(Boolean.valueOf(args.getBoolean("sendReportsInDevMode")));
            }
            if (args.containsKeyAndNotNull("socketTimeout")) {
                acraConfiguration.setSocketTimeout(args.getInt("socketTimeout"));
            }
            acraConfiguration.setHttpMethod(httpMethod);
            acraConfiguration.setReportType(reportType);
            acraConfiguration.setMode(mode);
        }
        catch (ACRAConfigurationException e) {
            e.printStackTrace();
            return;
        }
        ACRA.init((Application)currentApplication, (ACRAConfiguration)acraConfiguration);
    }
}

